plugins {
    id 'java-library'
    id 'net.neoforged.moddev' version '1.0.21'
    id 'com.modrinth.minotaur' version "2.+"
    id 'net.darkhax.curseforgegradle' version '1.1.18'
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group

repositories {
    mavenLocal()
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
    }
}

base {
    archivesName = name
}

neoForge {
    version = neo_version
    def at = file('src/main/resources/META-INF/accesstransformer.cfg')
    if (at.exists()) {
        accessTransformers.from(at.absolutePath)
    }
    parchment {
        minecraftVersion = parchment_minecraft
        mappingsVersion = parchment_version
    }
    runs {
        configureEach {
            systemProperty('neoforge.enabledGameTestNamespaces', mod_id)
            ideName = "NeoForge ${it.name.capitalize()} (${project.path})"
        }
        client {
            client()
        }
    }
    mods {
        "${mod_id}" {
            sourceSet sourceSets.main
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }
configurations {
    runtimeClasspath.extendsFrom localRuntime
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = "${mod_id}"
    uploadFile = jar
    versionNumber = "${mod_version}-neoforge"
    versionType = "${releaseType}"
    gameVersions = ["${minecraft_version}"] as Iterable<? extends String>
    loaders = ["neoforge"]
    changelog = rootProject.file("changelog.md").text
}

dependencies {
    implementation "maven.modrinth:nullcore:${nullcore_version}"
    compileOnly files("libs/AvaritiaNeo-1.21.4-1.0.4.jar")
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : project.name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            nullcore_version       : nullcore_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties
    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

idea {
    module {
        downloadSources = false
        downloadJavadoc = true
    }
}